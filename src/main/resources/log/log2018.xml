<?xml version="1.0" encoding="UTF-8"?>
<year id="y2018">
<template>
	<week id="" a1="节气：">
		<day id="" class="monday">
		</day>
		<day id="" class="tuesday">
		</day>
		<day id="" class="wednesday">
		</day>
		<day id="" class="thursday">
		</day>
		<day id="" class="friday">
		</day>
		<day id="" class="saturday">
		</day>
		<day id="" class="sunday">
		</day>
	</week>
</template>
<stage id="s01">
	<week id="w01" a1="节气：立冬">
		<day id="d20181112" class="monday">
		今日工作内容：
			（1）优化rpm代码，提高资源申请效率。优化点：资源申请过程中，更新资源用户配置过程，可能造成长时间阻塞。
			（2）补丁测试。资源申请效率有提升。
		</day>		
		<day id="d20181113" class="tuesday">
		今日工作内容：
			（1）流控资源申请不到问题分析，可能原因：依赖任务、资源申请、延迟队列——死锁。
		看书：
			《深入理解java虚拟机高级特性》：字节码执行子系统，方法调用——静态分配、动态分配、分配优先级
		随笔：
			关键字：第二职业、稿稿
		</day>
		<day id="d20181114" class="wednesday">
		工作：
			（1）proxy资源申请延迟队列死锁问题修复。
			（2）延迟队列死锁问题，补丁测试。
		</day>
		<day id="d20181115" class="thursday">
		工作：
			（1）延迟队列死锁问题解决。
			（2）补丁测试，出补丁包。
		学习：
			单例模式，几种实现方式及特点。
		随笔：
			大情怀是朴素的，大智慧是日常的，放牧一群词语。
		</day>
		<day id="d20181116" class="friday">
		工作：
			（1）将延迟队列问题中修改的代码合入当前版本。
			（2）申请不到资源问题补丁测试、转测。
		学习：
			建造者模式学习，建造者模式与工厂模式的区别，由多个简单对象创建复杂对象。
		</day>
		<day id="d20181117" class="saturday">
		学习：
			建造者模式：复杂对象有多个简单对象组装，组装逻辑变化多，提取可变部分，便于扩展。
			原型模式：浅拷贝（实现Cloneable）、深拷贝（序列化、反序列化）、
				ByteArrrayOutPutStream、ObjectOutPutStream、ByteArrrayInPutStream、ObjectInPutStream
		读书：
			《如何阅读一本书》：阅读的四个层次(基础阅读、检视阅读、分析阅读、主题阅读)、阅读的活力与艺术、
				阅读学习的四个阶段（略读、粗浅阅读..）
		</day>
		<day id="d20181118" class="sunday">
		学习：
			工厂模式、抽象公共模式，将使用与实现分离。
		读书：
			《如何阅读一本书》：
				阅读的活力与艺术：
					读者与作者的交互活动，主动、参与活动；阅读的目标（获得资讯、求得理解）；
					阅读是学习（指导型、自我发现型），吸收资讯、被启发（更深层次的学习）
				阅读的层次：四个层次
				基础阅读：
				检视阅读：略读、粗浅阅读、速读
				阅读时问自己几个问题
				书本分类：小说类、论说类（实用类/理论类），分类的重要性
		随笔：
			蒙田：初学者的无知在于未学，而学者的无知在于学后
		</day>
	</week>
	<week id="w02" a1="节气：立冬-小雪">
		<day id="d20181119" class="monday">
		工作：
			（1）资源抢占式，编码。原代码申请资源采用同步式，此处改为异步式申请，请求放入队列，从缓存取申请结果。
			（2）rpm优化，迭代计划issue单编写。
		</day>
		<day id="d20181120" class="tuesday">
		学习：
			程序设计原则：开闭原则、单一职责、替换原则、接口隔离、依赖倒转、聚合组合、最少了解。
			设计模式：代理模式（控制）、装饰器模式（功能增强）。
		</day>
		<day id="d20181121" class="wednesday">
		工作：
			（1）用户问题定位：同时间段，两次启动同一构建工程，导致其中一次构建不能正常进行。
			（2）任务抢占式，需求编码。
		</day>
		<day id="d20181122" class="thursday" a1="节气：小雪">
		工作：
			（1）任务抢占式，需求编码。
		随笔：
			小雪，黄经240°。
		</day>
		<day id="d20181123" class="friday">
		工作：
			（1）任务抢占式，需求编码。
		学习：
			（1）适配器模式学习：现有类或对象接口不符合要求，通过适配器实现目标接口，解决接口不兼容问题。
		</day>
		<day id="d20181124" class="saturday">
		没有工作学习，看了会书，看了几集电视。今天放纵了点，明天要回到正轨。
		</day>
		<day id="d20181125" class="sunday">
		今天上午去了光谷书店。下午看书、看电影。
		</day>
	</week>
	<week id="w03" a1="节气：小雪">
		<day id="d20181126" class="monday">
		工作：
			（1）任务抢占式，需求编码。
			（2）用户问题分析。
		学习：
			设计模式学习：
			桥接模式，将类的功能层次结构、实现层次结构分离，使两者能独立变化，建立桥梁，连接两部分。
			桥接模式主要角色：抽象化角色、实现者角色、改善后的抽象化角色（抽象化角色新增功能）、具体的实现者角色（功能实现）。
		</day>
		<day id="d20181127" class="tuesday">
		工作：
			（1）任务抢占式，需求编码。
		学习：
			设计模式学习：
			外观模式，为系统建立高层次接口，隐藏系统复杂性，简化系统的使用，客户端通过系统接口，使用系统。
			组合模式，部分整体模式，应用场景，树形菜单、文件夹管理。一个对象持有该类型对象的集合。
		</day>
		<day id="d20181128" class="wednesday">
		工作：
			（1）任务抢占式，方案探讨。
			（2）了解微服务架构，spring-cloud、dubbo。
		</day>
		<day id="d20181129" class="thursday">
		工作：
			（1）任务抢占式，编码。
			（2）看spring-cloud文档。
		</day>
		<day id="d20181130" class="friday">
		工作：
			（1）用户问题分析。
		</day>
		<day id="d20181201" class="saturday">
		学习：
			（1）看书——《如何阅读一本书》，学习基础阅读的四个阶段，准备阶段——学前教育，识字阶段，字汇积累阶段，阅读读物、精炼技巧。
			（2）spring cloud，服务发现：eureka、consul。
		</day>
		<day id="d20181202" class="sunday">
		随笔：
			今天，看了一部电影，看了会儿书。
		</day>
	</week>
</stage>
<stage id="s02">
	<week id="w04" a1="节气：小雪-大雪">
		<day id="d20181203" class="monday">
		</day>
		<day id="d20181204" class="tuesday">
		</day>
		<day id="d20181205" class="wednesday">
		</day>
		<day id="d20181206" class="thursday">
		</day>
		<day id="d20181207" class="friday" a1="节气：大雪">
		</day>
		<day id="d20181208" class="saturday">
		</day>
		<day id="d20181209" class="sunday">
		</day>
	</week>
</stage>
</year>